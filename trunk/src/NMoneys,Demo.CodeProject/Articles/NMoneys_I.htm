<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--------------------------------------------------------------------------->  
<!--                           INTRODUCTION                                

 The Code Project article submission template (HTML version)

Using this template will help us post your article sooner. To use, just 
follow the 3 easy steps below:
 
     1. Fill in the article description details
     2. Add links to your images and downloads
     3. Include the main article text

That's all there is to it! All formatting will be done by our submission
scripts and style sheets. 

-->  
<!--------------------------------------------------------------------------->  
<!--                        IGNORE THIS SECTION                            -->
<html>
<head>
<title>The Code Project</title>
<Style>
BODY, P, TD { font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10pt }
H2,H3,H4,H5 { color: #ff9900; font-weight: bold; }
H2 { font-size: 13pt; }
H3 { font-size: 12pt; }
H4 { font-size: 10pt; color: black; }
PRE { BACKGROUND-COLOR: #FBEDBB; FONT-FAMILY: "Courier New", Courier, mono; WHITE-SPACE: pre; }
CODE { COLOR: #990000; FONT-FAMILY: "Courier New", Courier, mono; }
</style>
<link rel="stylesheet" type="text/css" href="http://www.codeproject.com/App_Themes/NetCommunity/CodeProject.css">
</head>
<body bgcolor="#FFFFFF" color=#000000>
<!--------------------------------------------------------------------------->  


<!-------------------------------     STEP 1      --------------------------->
<!--  Fill in the details (CodeProject will reformat this section for you) -->

<pre>
Title:       NMoneys Part I, Motivations and ISO codes
Author:      dgon
Email:       dgon_rena@hotmail.com
Language:    C#
Platform:    .NET Framework
Technology:  Libraries
Level:       Intermediate
Description: NMoneys is an implementation of the Money Value Object to support representing moneys in the currencies defined in the ISO 4417 standard
for the .NET platform. In this part, motivations and the CurrencyIsoCode enumeration are analyzed.
Section      Platforms, Frameworks & Libraries
SubSection   .NET Framework
License:     CPOL
</pre>

<!-------------------------------     STEP 2      --------------------------->
<!--  Include download and sample image information.                       --> 

<ul class=download>
<li><a href="NMoneys_I_src.zip">Download source - XXX Kb</a></li>
<li><a href="NMoneys_demo.zip">Download demo project - XXX Kb </a></li>
</ul>

<p><img src="NMoneys_long.png" alt="Sample Image - maximum width is 600 pixels"></p>


<!-------------------------------     STEP 3      --------------------------->

<!--  Add the article text. Please use simple formatting (<h2>, <p> etc)   -->

<h2>Background</h2>

<p>Although the .NET Framework Base Class Library (BCL) offers a great deal of artifacts, it does not offer a good way of representing monetary quantities in
different currencies. It does offer, instead, numeric types and a way to format numeric values according to different formats. Problem lies in that those
formatting rules are mixed with concepts like cultures, languages, dates, calendars and so on, to the extent to become difficult and, in some cases,
impossible to represent a simple concept such as "one Canadian dollar" or "ten-and-the-half Zambian kwacha".</p>
<p>On top of the confusing mix of concepts, it happens that, sometimes, regional or formatting information is wrong: incorrect currency for a given country,
outdated information, missing countries and so on. The .NET Framework, being as big an widely used, has a rate of releasing fixes that is not very dynamic
(cough, cough) and if one's application relies on the Framework information for displaying monetary quantities for missing or incorrect currencies, one is
pretty much out of luck.</p>
<p>Furthermore, not only the implementation does not follow the ISO standard for currencies, but that formatting information can be changed by the user, making
consistency across versions, machines and updates a very challenging task.</p>

<p>Some other libraries might exist and one might go with hand-rolled classes, but in some cases the API is not as nice to work with as it could be or they are
pretty much not maintained at all.</p>

<p>Lack of support and consistency, having a need and a pair of hands to type, I created the <a href="http://code.google.com/p/nmoneys/">NMoneys</a> library to solve
my problems and the problems of some of the .NET developers out there. It is Open Source because it is neither rocket science, nor the single most valuable asset in
a company's utility belt. Besides, surprise, surprise, I do not know everything about currencies and monetary quantities. But with the support of the community that
can be solved, given that contributions are made to the project.</p>

<p>Some of my colleagues, myself and, hopefully, someone else who I do not know yet, have already used the library before this article was published, meaning that,
at least is useful to solve somebody's problems.</p>

<h2>Using the code</h2>

<p>I am a strong believer that expressive unit tests are the best for of documentation that exists. I also think they are as good as any other way of
driving this series of articles. Hence, all the code I will be showing are unit tests that show off the abilities of
<a href="http://code.google.com/p/nmoneys/">NMoneys</a>. Those unit tests are <a href="http://www.nunit.com/">NUnit</a> tests and can be executed by
your favorite test runner.</p>
<p>Each snippet will be included in the source code download for the part.</p>
<p>On top of the code for each part of the series a "demo" project that contains the Visual Studio 2010 project (.NET 4.0) with all the tests will be included.</p>

<h2>ISO Currency codes</h2>
<p>From <a href="http://www.iso.org/iso/support/faqs/faqs_widely_used_standards/widely_used_standards_other/currency_codes.htm">The International Organization for
Standardization (ISO)</a>: <cite>"This International Standard specifies the structure for a three-letter alphabetic code and an equivalent three-digit numeric code
for the representation of currencies and funds"</cite>. Maintenance of the standard is carried out by the <a href="http://www.currency-iso.org/">ISO 4217 Maintenance
Agency</a>.</p>
<p>What all this bureaucracy talk means is that there is an international organism that standardizes the currencies and their alphabetic and numeric codes.
That is, they reflect the changes in legal tender used by a number of <i>entities</i> (as they call them) or countries/institutions (so that everyone can understand).</p>
<p>NMoneys is not focused on the list of entities (countries) at all, but in the list of valid currencies at this current moment in time. This list establishes which
currencies are valid, and which are not recognized. Yes, I know, it is a standard, that involves a lot of politics and yadi yadi dah, but it is the most reliable list
of currencies at hand.</p>
<p>Bottom line is: there are a lot of currencies, currencies are dynamic (new ones are used and old ones are deprecated) and the .NET Framework does not support
all of them or it is simply wrong in some other cases.</p>
<h3>Currency Codes in NMoneys</h3>
<p>In NMoneys, a given currency code is represented as a value of the enumeration <code>CurrencyIsoCode</code></p>
<pre lang="C#">
[Test]
public void currency_codes_are_modeled_as_enums_named_after_its_ISO_alphabetic_code()
{
    CurrencyIsoCode usDollars = CurrencyIsoCode.USD;
    CurrencyIsoCode euro = CurrencyIsoCode.EUR;
    CurrencyIsoCode danishKrona = CurrencyIsoCode.DKK;
    CurrencyIsoCode noCurrency = CurrencyIsoCode.XXX;
}

[Test]
public void currency_codes_have_their_ISO_numeric_value()
{
    Assert.That((short)CurrencyIsoCode.USD, Is.EqualTo(840));
    Assert.That((short)CurrencyIsoCode.EUR, Is.EqualTo(978));
    Assert.That((short)CurrencyIsoCode.DKK, Is.EqualTo(208));
    Assert.That((short)CurrencyIsoCode.XXX, Is.EqualTo(999));
}

[Test]
public void less_common_currencies_are_also_modeled_as_long_as_they_are_approved_by_ISO()
{
    CurrencyIsoCode platinum = CurrencyIsoCode.XPT;
    CurrencyIsoCode yemeniRial = CurrencyIsoCode.YER;
}

[Test]
public void recently_deprecated_currencies_are_also_present()
{
    var estonianKroon = CurrencyIsoCode.EEK;
    Assert.That(estonianKroon.AsAttributeProvider(), Has.Attribute&lt;ObsoleteAttribute&gt;());
}</pre>
<p>As one can see from the snippet, the complete ISO standard is implemented, with alphabetic and numeric codes, including less common currencies and
recently deprecated ones, but those are marked with the <code>ObsoleteAttribute</code> to clearly highlight them as deprecated.</p>

<h2>Wrap-up</h2>

<p>In this first part of the series, we have seen what NMoneys is, why it is "needed" in the first place and we've met the simplest ingredient for the whole recipe.</p>
<p>So far we have seen nothing but a quite long enumeration, but this is less than useful. For those more useful bits, one would need to refer to
further parts of the series.</p>

<h2>History</h2>

<p>07-May-2011 - Initial version</p>

<!-------------------------------    That's it!   --------------------------->
</body>

</html>

