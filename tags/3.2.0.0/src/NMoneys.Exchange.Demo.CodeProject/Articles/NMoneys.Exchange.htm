
<ul class="Download">
<a href="NMoneys_Exchange/NMoneys.Exchange_demo.zip">Download NMoneys.Exchange_demo.zip - 117.19 KB</a>
</ul>

<p><img height="101" width="600" src="NMoneys_Exchange/NMoneys_long.png" alt="NMoneys_long.png" /></p>

<h2>Background&nbsp;</h2>

<p>I have already written about <a href="http://code.google.com/p/nmoneys/">NMoneys</a> in this <a href="NMoneys.aspx">article</a>, but I will do a tiny recap for those in a rush.&nbsp;</p>

<p><a href="http://code.google.com/p/nmoneys/">NMoneys</a> is a &quot;Money Value Object&quot; implementation for the .NET platform that supports the
<a href="http://www.iso.org/iso/support/faqs/faqs_widely_used_standards/widely_used_standards_other/currency_codes.htm">ISO 4217 standard</a>.</p>
<p>That definition means that with that library we are able to represent and operate with monetary quantities in a variety of currencies.</p>
<p>The informal <a href="http://code.google.com/p/nmoneys/#What_not">scope of the project</a> establishes that <a href="http://code.google.com/p/nmoneys/">NMoneys</a> does not provide any support
for exchanging monetary quantities in different currencies. In fact, all the operations are defined in terms of quantities with the same curency.</p>
<p>Surprisingly enough (or maybe not), most of the feedback I received was on the line of adding those capabilities. Reluctant as I was at first, I could not but listen, shrug and give it a shot.
And this is what I came up with.</p>
<h3>Disclaimer</h3>
<p>Do not get false impressions: IT IS NOT a currency exchange service. It is just a mean to allow exchange operations to happen between the monetary quantities. One still needs to feed and/or retrieve real, current
financial data from a reliable third party in order for the operations to be accurate.</p>

<h2>Using the code</h2>

<p>All code for snippets (and more that is not pubished for brevity) will be included in the demo project (Visual Studio 2010, .NET 4.0).</p>

<p>The code for the demo project can also be browsed from the horse's mouth in the
<a href="http://code.google.com/p/nmoneys/source/browse/#svn%2Ftrunk%2Fsrc%2FNMoneys.Exchange.Demo.CodeProject">project web site.</a>
Likewise, the latest version of the code for NMoneys and NMoneys.Exchange libraries can be easily acccessed 
<a href="http://code.google.com/p/nmoneys/source/browse/#svn%2Ftrunk%2Fsrc%2FNMoneys">here</a> and <a href="http://code.google.com/p/nmoneys/source/browse/#svn%2Ftrunk%2Fsrc%2FNMoneys.Exchange">here</a>.</p>

<h2>Extend and Conquer</h2>
<h3>Independence</h3>
<p>One thing I was determined from the very begining: whichever features were to be added, they would be added to another project and would not &quot;polute&quot; the simplicity and focus of the original project.</p>
<p>After some thinking I came to the conclusion that extension methods on the <code>Money</code> class should become the entry API for the new features and a new library would host them.
That model would allow different release cycles for each projectand would allow clients that do not need the new capabilities remain &quot;bloat&quot;-free.</p>
<h3>Simplicity</h3>
<p>After independence, simplicity is the theme to guides the design of the library.</p>
<p>One of the reasons exchange operations were not even considered for the library in the first place was their complexity. Operations such as conversions on fractional quantities are not trivial;
there are roundings, losses and all sorts of pitfalls that, when it comes to money, one cannot obviate. I do not posses the knowledge of the rules that command such operations and yet I am decided to implement them.
How dare! Well, not much. Since amounts are modeled as <code>System.Decimal</code> quantities, the simplest that can posibly work was used as a &quot;safe&quot; default: use the existing product and division operations.
</p>
<h3>Extensibility</h3>
<p>I am well aware that the simplest, default operations might not be suitable for everyone (they might even be incorrect). What has been done to protect correctness and integrity is provide multiple extensibility
points that would allow those &quot;in the know&quot; to do the right thing. It would be equally awesome that those enlightened ones contributed with the rest of the world those extensions ;-p
</p>
<h2>Conversions</h2>
<p>Once the .NET project references the <code>NMoneys.dll</code> and the <code>NMoneys.Exchange.dll</code> assemblies, conversion operations can be brought to the code by just using the <code>NMoneys.Exchange</code>
namespace. That action would enable the <code>.Convert()</code> extension method on <code>Money</code> instances.&nbsp;</p>
<h3>Meaningless Defaults</h3>
<p>The simplest (and probably the most useless) of conversions one can perform is a direct conversion, meaning that one monetary quantity, let's say 3 euros, would be converted to 3 US dollars or 3 pounds
if all defaults were used. Clearly, a pretty little mess.</p>
<pre lang="cs">[Test]
public void Default_Conversions_DoNotBlowUpButAreNotTerriblyUseful()
{
    var tenEuro = new Money(10m, CurrencyIsoCode.EUR);

    var tenDollars = tenEuro.Convert().To(CurrencyIsoCode.USD);
    Assert.That(tenDollars.Amount, Is.EqualTo(10m));
            
    var tenPounds = tenEuro.Convert().To(Currency.Gbp);
    Assert.That(tenPounds.Amount, Is.EqualTo(10m));
}</pre>
<p>Defaults <em>must</em> be changed. One way would have been providing a decimal rate conversion somewhere in the method call chain. Simple, ugly in some many levels, 
	but certainly doable given the multiple extension points of the framework.
Passing a harcoded rate (volatile as they are) is not the way to go; forcing 
	developers to create some sort of provider of values, so why not embed it in the framework?</p>
<h3>X will provide</h3>
<p>A straightforward provider model is used to override the default rates. An implementation of <code>IExchangeRateProvider</code> that allows more correct conversions needs to be configured. That is done by
setting a delegate into the property <code>ExchangeRateProvider.Factory</code>. A completely 
	&quot;from scratch&quot; implementation that consults an on-line provider is welcome and so is the already tagged as useless <code>ExchangeRateProvider.Default</code>.</p>
<pre lang="cs">[Test]
public void Configuring_Provider()
{
	var customProvider = new TabulatedExchangeRateProvider();
	customProvider.Add(CurrencyIsoCode.EUR, CurrencyIsoCode.USD, 0);

	ExchangeRateProvider.Factory = () =&gt; customProvider;

	var tenEuro = new Money(10m, CurrencyIsoCode.EUR);
	var zeroDollars = tenEuro.Convert().To(CurrencyIsoCode.USD);

	// go back to default
	ExchangeRateProvider.Factory = ExchangeRateProvider.Default;
}</pre>
<p>From the example, one can peek another implementation of the <code>IExchangeRateProvider</code>, the <code>TabulatedExchangeRateProvider</code>. This provider eases the creation of &quot;static&quot; exchange rates tables,
which might be useful in some domains, mostly in terms of caching calls. Use your favorite Inversion of Control container, complex ad-hoc type creation policies and one can do pretty clever things to save request to real-time providers.
A more complete set of capabilities of the class is showcased in its <a href="http://code.google.com/p/nmoneys/source/browse/trunk/src/NMoneys.Exchange.Tests/TabulatedExchangeProviderTester.cs">unit tests</a>,
such as the ability to add rates and calculate their inverse rates.</p>
<h3>Highly rated</h3>
<p>Useless default implementation left behind, fresh new rates can be feed into the 	system by the use of a custom provider and yet the default calculations performed by <code>ExchangeRate</code> are unsuitable for your purposes. Should you give up? Absolutely not. Having the ability to use a custom provider enables that custom provider to return inheritors of <code>ExchangeRate</code> that use custom logic to perform calculations.</p>
<ol>
<li>First, come up with a <code>ExchangeRate</code> inheritor that performs the operations in the desired fashion:</li>
<pre lang="cs">public class CustomRateArithmetic : ExchangeRate
{
    public CustomRateArithmetic(CurrencyIsoCode from, CurrencyIsoCode to, decimal rate) : base(from, to, rate) { }

    public override Money Apply(Money from)
    {
        // instead of this useless &quot;return 0&quot; policy one can implement rounding policies, for instance
        return new Money(0m, To);
    }
}
</pre>
<li>Then create the <code>IExchangeRateProvider</code> implementation that makes use of this custom rate applying logic:</li>
<pre lang="cs">public class CustomArithmeticProvider : IExchangeRateProvider
{
    public ExchangeRate Get(CurrencyIsoCode from, CurrencyIsoCode to)
    {
        return new CustomRateArithmetic(from, to, 1m);
    }

    public bool TryGet(CurrencyIsoCode from, CurrencyIsoCode to, out ExchangeRate rate)
    {
        rate = new CustomRateArithmetic(from, to, 1m);
        return true;
    }
}
</pre>
<li>And last, for not least, make the framework aware that your calculations are performed by the provider just implemented,
using the technique shown before: setting the <code>ExchangeRateProvider.Factory</code> delegate.</li>
<pre lang="cs">[Test]
public void Use_CustomArithmeticProvider()
{
    var customProvider = new CustomArithmeticProvider();
    ExchangeRateProvider.Factory = () =&gt; customProvider;

    var zeroDollars = 10m.Eur().Convert().To(CurrencyIsoCode.USD);
    Assert.That(zeroDollars, Is.EqualTo(0m.Usd()));
    // go back to default
    ExchangeRateProvider.Factory = ExchangeRateProvider.Default;
}
</pre>
</ol>
<h3>Redefine the API</h3>
<p>One can go as far as redifining how the API looks. We mentioned that providing a fixed number as a rate might not be the most
clever of the ideas, but one is able to do it, nonetheless.</p>
<ol>
<li>Extend the <code>IExchangeConversion</code> entry point to return a custom type. </li><pre lang="cs">public static UsingImplementor Using(this IExchangeConversion conversion, decimal rate)
{
    return new UsingImplementor(conversion.From, rate);
}</pre>
<li>Implement the custom type. </li>
<pre lang="cs">public class UsingImplementor
{
    private readonly Money _from;
    private readonly decimal _rate;
    public UsingImplementor(Money from, decimal rate)
    {
        _from = from;
        _rate = rate;
    }
    public Money To(CurrencyIsoCode to)
    {
        var rateCalculator = new ExchangeRate(_from.CurrencyCode, to, _rate);
        return rateCalculator.Apply(_from);    
    }
}
</pre>
<li>Use your newly shaped API to paint yourself into an ugly corner ;-)</li>
<pre lang="cs">[Test]
public void Creating_New_ConversionOperations()
{
    var hundredDollars = new Money(100m, CurrencyIsoCode.USD);

    var twoHundredEuros = hundredDollars.Convert().Using(2m).To(CurrencyIsoCode.EUR);

    Assert.That(twoHundredEuros, Is.EqualTo(200m.Eur()));
}
</pre>
</ol>
<p>Of course, the extensibility of the API can be used to solve some other problems, such as providing different conversions for buy/sell currencies or many other smart scenarios that I cannot fabricate.</p>
<h2>Wrapping it up</h2>

<p>I had several goals with this article.</p>

<p>Make a point that <a href="http://code.google.com/p/nmoneys/">NMoneys</a> library is alive and kicking.</p>
<p>Secondly, that feedback was very welcome. And, as a result, <a href="http://code.google.com/p/nmoneys/wiki/Exchange">NMoneys.Exchange</a> was implementated.</p>
<p>And last, but not least, take the chance to show how an API can be extensible and non-intrusive in order not to bloat the original project.
&nbsp;</p><p>Write code, share it and be merry.</p>

<h2>History</h2>

<p>25-Sep-2011 - Initial version</p>
